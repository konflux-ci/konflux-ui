
---
alwaysApply: true
---

# Konflux UI Project Structure & Architecture

> ðŸ“– **Also see**: [CONTRIBUTING.md](mdc:CONTRIBUTING.md) for detailed development guidelines, styling conventions, and import patterns.

Konflux UI is a React TypeScript application for managing Kubernetes CI/CD workflows. Understanding the project structure is essential for effective development.

## Key Entry Points
- [src/main.tsx](mdc:src/main.tsx) - Application entry point with React providers
- [src/routes/index.tsx](mdc:src/routes/index.tsx) - React Router configuration
- [package.json](mdc:package.json) - Dependencies and build scripts

## Core Directory Structure

### Component Organization
```
src/
â”œâ”€â”€ components/          # Feature-specific components (domain logic)
â”‚   â”œâ”€â”€ Applications/    # Application management components
â”‚   â”œâ”€â”€ Components/      # Component management features  
â”‚   â”œâ”€â”€ Releases/        # Release management
â”‚   â””â”€â”€ [FeatureName]/   # Each major feature has its own folder
â”œâ”€â”€ shared/             # Generic, reusable components & utilities
â”‚   â”œâ”€â”€ components/     # UI components with no business logic
â”‚   â”œâ”€â”€ hooks/          # Reusable React hooks
â”‚   â””â”€â”€ utils/          # Pure utility functions
â””â”€â”€ hooks/              # Business logic hooks (API calls, state management)
```

### Supporting Infrastructure
```
src/
â”œâ”€â”€ types/              # TypeScript type definitions
â”œâ”€â”€ models/             # Data model definitions  
â”œâ”€â”€ k8s/               # Kubernetes API interaction layer
â”œâ”€â”€ utils/             # Utility functions with business logic
â”œâ”€â”€ consts/            # Application constants and enums
â”œâ”€â”€ feature-flags/     # Client-side feature flag system
â”œâ”€â”€ auth/              # Authentication context and utilities
â”œâ”€â”€ kubearchive/       # KubeArchive integration (historical data)
â”œâ”€â”€ unit-test-utils/   # Testing utilities and helper functions
â””â”€â”€ routes/            # Route definitions and page wrappers
```

## Key Technologies & Patterns

### UI Framework
- **PatternFly React** - Primary component library
- **React 18** with functional components and hooks
- **TypeScript** with strict type checking
- **SCSS** for component-specific styling

### State Management
- **useK8sWatchResource** - Kubernetes resource watching and caching
- **TanStack React Query** - Additional server state management
- **Zustand** - Lightweight client state (feature flags)
- **React Context** - Authentication and namespace providers

### Development Tools
- **Webpack** - Module bundling and dev server
- **Jest** - Unit testing framework  
- **Cypress** - End-to-end testing
- **ESLint + Prettier** - Code formatting and linting

## Import Path Aliases
Use absolute imports with these configured aliases:
- `~/components` â†’ `src/components`
- `~/types` â†’ `src/types`
- `~/k8s` â†’ `src/k8s`
- `~/utils` â†’ `src/utils`
- `~/models` â†’ `src/models`
- `@routes` â†’ `src/routes`

## Architecture Principles
1. **Feature-based component organization** - Each major feature (Applications, Components, etc.) has its own folder
2. **Separation of concerns** - Business logic in `hooks/`, pure UI in `shared/components/`
3. **Import restrictions** - Strict layering prevents circular dependencies (see [.eslintrc.restrict-imports.cjs](mdc:.eslintrc.restrict-imports.cjs))
4. **Client-side feature flags** - New features wrapped with feature flags during development
5. **Dual data sources** - Live cluster data + historical archive data for comprehensive views
6. **Kubernetes-first approach** - Built specifically for K8s resource management with `useK8sWatchResource`
